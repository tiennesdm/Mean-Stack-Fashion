import { Component, Input } from '@angular/core';
import { startWith, map } from 'rxjs/operators';
import { FormControl } from '@angular/forms';
import { PlacesService } from './services/places.service';
import { environment } from '../environments/environment';
var LocationComponent = /** @class */ (function () {
    function LocationComponent(placesService) {
        this.placesService = placesService;
        this.config = {
            state: true,
            city: true
        };
        this.defaultApi = '00000000000000000000000000000000';
    }
    LocationComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.battutaToken) {
            this.battutaToken = environment.battutaToken;
        }
        if (!this.locationData) {
            this.locationData = {
                country: '',
                state: '',
                city: ''
            };
        }
        this.formData = [
            {
                key: 'country',
                placeholder: 'Country',
                next: 'state',
                prop: 'name',
                data: []
            },
            {
                key: 'state',
                placeholder: 'State',
                next: 'city',
                prop: 'region',
                data: []
            },
            {
                key: 'city',
                placeholder: 'City',
                prop: 'city',
                data: []
            }
        ];
        this.config.city = this.config.state === false ? false : this.config.city;
        for (var indexOfData in this.config) {
            if (!this.config[indexOfData]) {
                var indexele = this.formData.findIndex(function (temp) { return temp['key'] === indexOfData; });
                this.formData.splice(indexele, 1);
            }
        }
        if (localStorage.getItem('locationcountry')) {
            var countryList = localStorage.getItem('locationcountry');
            this.formData[0]['data'] = this.formData[0]['data'].concat(JSON.parse(countryList));
        }
        else {
            this.getData(this.formData[0], 'country');
        }
        var _loop_1 = function (formval) {
            formval[formval['key']] = new FormControl();
            formval['filterData' + formval['key']] = formval[formval['key']].valueChanges
                .pipe(startWith(''), map(function (value) { return value ? _this._filterStates(value, formval) : formval['data'].slice(); }));
        };
        for (var _i = 0, _a = this.formData; _i < _a.length; _i++) {
            var formval = _a[_i];
            _loop_1(formval);
        }
    };
    LocationComponent.prototype._filterStates = function (value, formData) {
        var filterValue = value.toLowerCase();
        return formData['data'].filter(function (state) { return state[formData['prop']].toLowerCase().indexOf(filterValue) === 0; });
    };
    // battuta.medunes.net api
    // battuta.medunes.net api
    LocationComponent.prototype.getData = 
    // battuta.medunes.net api
    function (currObj, type) {
        var _this = this;
        if (type === 'country') {
            var path = this.placesService.getApiList()[0]['path'].replace('{{token}}', this.battutaToken);
            this.placesService.getDataFromCloud(path).subscribe(function (data) {
                _this.formData[0]['data'] = _this.formData[0]['data'].concat(data);
                localStorage.setItem('locationcountry', JSON.stringify(data));
            }, function (err) {
                _this.battutaToken = _this.defaultApi;
                _this.getData(currObj, 'country');
            });
            return;
        }
        if (currObj.next) {
            var data = this.placesService.apiList.find(function (tempdata) { return tempdata['key'] === currObj.next; });
            var coutrydata = this.formData[0]['data'].find(function (tempData1) { return tempData1['name'] === _this.formData[0]['country'].value; });
            var code = coutrydata ? coutrydata['code'] : '';
            if (data) {
                var apipath = data['path'].replace('{{country_code}}', code).replace('{{token}}', this.battutaToken);
                if (currObj['next'] === 'city') {
                    apipath = apipath.replace('{{city}}', this.formData[1]['state'].value);
                }
                var formData_1 = this.formData.find(function (tempdata) { return tempdata['key'] === currObj.next; });
                if (formData_1) {
                    this.placesService.getDataFromCloud(apipath).subscribe(function (data) {
                        if (formData_1) {
                            formData_1['data'] = data;
                        }
                        _this.resetField(currObj.next);
                    }, function (err) {
                        _this.battutaToken = _this.defaultApi;
                        _this.getData(currObj);
                    });
                }
            }
        }
    };
    LocationComponent.prototype.resetField = function (nextKey) {
        var formData = this.formData.find(function (tempdata) { return tempdata['key'] === nextKey; });
        if (formData) {
            formData[nextKey].reset();
            if (formData.hasOwnProperty('next')) {
                this.resetField(formData['next']);
            }
        }
    };
    LocationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'angular5-location',
                    template: "\n  <div *ngFor=\"let curdata of formData\">\n\t<mat-form-field>\n<input matInput [(ngModel)]=\"locationData[curdata.key]\" placeholder=\"{{curdata.placeholder}}\" [matAutocomplete]=\"auto\" [formControl]=\"curdata[curdata.key]\">\n\t\t<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"getData(curdata)\">\n\t\t\t<mat-option *ngFor=\"let options of curdata['filterData'+curdata['key']] | async\" [value]=\"options[curdata.prop]\" >\n\t\t\t\t<span>{{options[curdata.prop]}}</span>\n\t\t\t</mat-option>\n\t\t</mat-autocomplete>\n\t</mat-form-field>\n</div>\n  "
                    // templateUrl: './location.component.html',
                    // styleUrls: ['./location.component.css']
                },] },
    ];
    /** @nocollapse */
    LocationComponent.ctorParameters = function () { return [
        { type: PlacesService, },
    ]; };
    LocationComponent.propDecorators = {
        "battutaToken": [{ type: Input },],
        "locationData": [{ type: Input },],
        "config": [{ type: Input },],
    };
    return LocationComponent;
}());
export { LocationComponent };
//# sourceMappingURL=location.component.js.map