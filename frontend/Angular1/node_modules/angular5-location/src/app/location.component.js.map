{"version":3,"file":"location.component.js","sourceRoot":"","sources":["../../../src/app/location.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { startWith, map } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\nimport { PlacesService } from './services/places.service';\nimport { environment } from '../environments/environment';\n@Component({\n  selector: 'angular5-location',\n  template : `\n  <div *ngFor=\"let curdata of formData\">\n\t<mat-form-field>\n<input matInput [(ngModel)]=\"locationData[curdata.key]\" placeholder=\"{{curdata.placeholder}}\" [matAutocomplete]=\"auto\" [formControl]=\"curdata[curdata.key]\">\n\t\t<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"getData(curdata)\">\n\t\t\t<mat-option *ngFor=\"let options of curdata['filterData'+curdata['key']] | async\" [value]=\"options[curdata.prop]\" >\n\t\t\t\t<span>{{options[curdata.prop]}}</span>\n\t\t\t</mat-option>\n\t\t</mat-autocomplete>\n\t</mat-form-field>\n</div>\n  `\n  // templateUrl: './location.component.html',\n  // styleUrls: ['./location.component.css']\n})\nexport class LocationComponent {\n  @Input() battutaToken :  string;\n  @Input() locationData: ILocationData;\n  @Input() config: ILocationData = {\n    state: true,\n    city: true\n  };\n  defaultApi = '00000000000000000000000000000000';\n  formData: Array<Object>;\n  constructor(public placesService: PlacesService) { }\n  ngOnInit() {\n    if(!this.battutaToken) {\n      this.battutaToken = environment.battutaToken;\n    }\n    if (!this.locationData) {\n      this.locationData = {\n        country: '',\n        state: '',\n        city: ''\n      };\n    }\n    this.formData = [\n      {\n        key: 'country',\n        placeholder: 'Country',\n        next: 'state',\n        prop: 'name',\n        data: []\n      },\n      {\n        key: 'state',\n        placeholder: 'State',\n        next: 'city',\n        prop: 'region',\n        data: []\n      },\n      {\n        key: 'city',\n        placeholder: 'City',\n        prop: 'city',\n        data: []\n      }\n    ];\n    this.config.city = this.config.state === false ? false : this.config.city;\n    for (var indexOfData in this.config) {\n      if (!this.config[indexOfData]) {\n        let indexele = this.formData.findIndex(temp => temp['key'] === indexOfData);\n        this.formData.splice(indexele, 1);\n      }\n    }\n\n    if (localStorage.getItem('locationcountry')) {\n      var countryList = localStorage.getItem('locationcountry') as string;\n      this.formData[0]['data'] = (this.formData[0]['data'] as Array<Object>).concat(JSON.parse(countryList));\n    } else {\n      this.getData(this.formData[0], 'country');\n    }\n    for (let formval of this.formData) {\n      formval[formval['key']] = new FormControl();\n      formval['filterData' + formval['key']] = formval[formval['key']].valueChanges\n        .pipe(\n          startWith(''),\n          map(value => value ? this._filterStates(value, formval) : formval['data'].slice())\n        );\n    }\n  }\n  private _filterStates(value, formData?): any[] {\n    const filterValue = value.toLowerCase();\n    return formData['data'].filter(state => state[formData['prop']].toLowerCase().indexOf(filterValue) === 0);\n  }\n\n\n  // battuta.medunes.net api\n  getData(currObj, type?) {\n    if(type === 'country') {\n      var path = this.placesService.getApiList()[0]['path'].replace('{{token}}', this.battutaToken);\n      this.placesService.getDataFromCloud(path).subscribe(data => {\n        this.formData[0]['data'] = (this.formData[0]['data'] as Array<Object>).concat(data);\n        localStorage.setItem('locationcountry', JSON.stringify(data));\n      }, err => {\n        this.battutaToken = this.defaultApi;\n        this.getData(currObj, 'country');\n      });\n      return;\n    }\n    if (currObj.next) {\n      var data = this.placesService.apiList.find(tempdata => tempdata['key'] === currObj.next);\n      var coutrydata = (this.formData[0]['data'] as Array<object>).find(tempData1 => tempData1['name'] === this.formData[0]['country'].value);\n      var code = coutrydata ? coutrydata['code'] : '';\n      if (data) {\n        var apipath = (data['path'] as String).replace('{{country_code}}', code).replace('{{token}}', this.battutaToken);\n        if (currObj['next'] === 'city') {\n          apipath = apipath.replace('{{city}}', this.formData[1]['state'].value);\n        }\n        let formData = this.formData.find(tempdata => tempdata['key'] === currObj.next);\n        if (formData) {\n          this.placesService.getDataFromCloud(apipath).subscribe(data => {\n            if (formData) {\n              formData['data'] = data;\n            }\n            this.resetField(currObj.next);\n          }, err => {\n            this.battutaToken = this.defaultApi;\n            this.getData(currObj);\n          });\n        }\n      }\n    }\n  }\n  resetField(nextKey) {\n    let formData = this.formData.find(tempdata => tempdata['key'] === nextKey);\n    if (formData) {\n      (formData[nextKey] as FormControl).reset();\n      if (formData.hasOwnProperty('next')) {\n        this.resetField(formData['next']);\n      }\n    }\n\n  }\n}\nexport interface ILocationData {\n  country?: any,\n  state: any,\n  city: any\n}\n"]}