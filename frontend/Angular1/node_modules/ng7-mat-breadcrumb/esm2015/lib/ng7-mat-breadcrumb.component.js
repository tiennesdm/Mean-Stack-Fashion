/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET } from '@angular/router';
import { filter } from 'rxjs/operators';
import { map } from 'rxjs/internal/operators';
export class Ng7MatBreadcrumbComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} router
     */
    constructor(activatedRoute, router) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.breadcrumb = [];
        this.breadCrumbData();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    breadCrumbData() {
        this.router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationEnd)))
            .pipe(map((/**
         * @return {?}
         */
        () => this.activatedRoute)))
            .pipe(map((/**
         * @param {?} route
         * @return {?}
         */
        (route) => {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        })))
            .pipe(filter((/**
         * @param {?} route
         * @return {?}
         */
        route => route.outlet === PRIMARY_OUTLET)))
            .subscribe((/**
         * @param {?} route
         * @return {?}
         */
        route => {
            if (route.snapshot.data.breadcrumb) {
                /** @type {?} */
                const breadcrumb = (JSON.parse(JSON.stringify(route.snapshot.data.breadcrumb)));
                breadcrumb.map((/**
                 * @param {?} crumb
                 * @return {?}
                 */
                (crumb) => {
                    /** @type {?} */
                    const urlChunks = crumb.url.split('/');
                    for (const chunk of urlChunks) {
                        if (chunk.includes(':')) {
                            /** @type {?} */
                            const paramID = chunk.replace(':', '');
                            /** @type {?} */
                            const routerParamID = route.snapshot.params[paramID];
                            crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);
                        }
                    }
                }));
                this.breadcrumb = breadcrumb;
            }
            else {
                this.breadcrumb = [];
            }
        }));
    }
}
Ng7MatBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-ng7-mat-breadcrumb',
                template: "<mat-toolbar class=\"mat-bread-crumb\">\n    <mat-list class=\"mat-bread-crumb-list\" *ngIf=\"breadcrumb.length\">\n        <mat-list-item>\n            <span class=\"mat-bread-crumb-spacer\">\n                <span *ngFor=\"let item of breadcrumb; let i = index\">\n                    <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</a>\n                    <span *ngIf=\"!item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</span>\n                    <span *ngIf=\"breadcrumb.length !== i+1\"> / </span>\n                </span>\n            </span>\n        </mat-list-item>\n    </mat-list>\n</mat-toolbar>",
                styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"]
            }] }
];
/** @nocollapse */
Ng7MatBreadcrumbComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router }
];
if (false) {
    /** @type {?} */
    Ng7MatBreadcrumbComponent.prototype.breadcrumb;
    /**
     * @type {?}
     * @private
     */
    Ng7MatBreadcrumbComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    Ng7MatBreadcrumbComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmc3LW1hdC1icmVhZGNydW1iLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nNy1tYXQtYnJlYWRjcnVtYi8iLCJzb3VyY2VzIjpbImxpYi9uZzctbWF0LWJyZWFkY3J1bWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFvQixNQUFNLGlCQUFpQixDQUFDO0FBQzFHLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFZLE1BQU0seUJBQXlCLENBQUM7QUFPeEQsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7SUFHcEMsWUFDVSxjQUE4QixFQUM5QixNQUFjO1FBRGQsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFKeEIsZUFBVSxHQUFpQixFQUFFLENBQUM7UUFNNUIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFRCxRQUFRO0lBQ1IsQ0FBQzs7OztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07YUFDZixJQUFJLENBQUMsTUFBTTs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxZQUFZLGFBQWEsRUFBQyxDQUFDO2FBQ3JELElBQUksQ0FBQyxHQUFHOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFDLENBQUM7YUFDcEMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2xCLE9BQU8sS0FBSyxDQUFDLFVBQVUsRUFBRTtnQkFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQzthQUFFO1lBQ3RELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFDLENBQUM7YUFDRixJQUFJLENBQUMsTUFBTTs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxjQUFjLEVBQUMsQ0FBQzthQUN0RCxTQUFTOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFFakIsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7O3NCQUM1QixVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDL0UsVUFBVSxDQUFDLEdBQUc7Ozs7Z0JBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTs7MEJBQ2pCLFNBQVMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7b0JBRXRDLEtBQUssTUFBTSxLQUFLLElBQUksU0FBUyxFQUFFO3dCQUM3QixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7O2tDQUNqQixPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDOztrQ0FDaEMsYUFBYSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzs0QkFDcEQsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO3lCQUM3RDtxQkFDRjtnQkFDSCxDQUFDLEVBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQzthQUN0QjtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBL0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxvckJBQWtEOzthQUVuRDs7OztZQVJRLGNBQWM7WUFBRSxNQUFNOzs7O0lBVTdCLCtDQUE4Qjs7Ozs7SUFHNUIsbURBQXNDOzs7OztJQUN0QywyQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIsIE5hdmlnYXRpb25FbmQsIFBSSU1BUllfT1VUTEVULCBSb3V0ZXNSZWNvZ25pemVkIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IG1hcCwgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL2ludGVybmFsL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCcmVhZGNydW1iIH0gZnJvbSAnLi9icmVhZGNydW1iLm1vZGVsJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1uZzctbWF0LWJyZWFkY3J1bWInLFxuICB0ZW1wbGF0ZVVybDogJy4vbmc3LW1hdC1icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbmc3LW1hdC1icmVhZGNydW1iLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBOZzdNYXRCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgYnJlYWRjcnVtYjogQnJlYWRjcnVtYltdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHtcbiAgICB0aGlzLmJyZWFkQ3J1bWJEYXRhKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIGJyZWFkQ3J1bWJEYXRhKCkge1xuICAgIHRoaXMucm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoZmlsdGVyKGV2ZW50ID0+IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkpXG4gICAgICAucGlwZShtYXAoKCkgPT4gdGhpcy5hY3RpdmF0ZWRSb3V0ZSkpXG4gICAgICAucGlwZShtYXAoKHJvdXRlKSA9PiB7XG4gICAgICAgIHdoaWxlIChyb3V0ZS5maXJzdENoaWxkKSB7IHJvdXRlID0gcm91dGUuZmlyc3RDaGlsZDsgfVxuICAgICAgICByZXR1cm4gcm91dGU7XG4gICAgICB9KSlcbiAgICAgIC5waXBlKGZpbHRlcihyb3V0ZSA9PiByb3V0ZS5vdXRsZXQgPT09IFBSSU1BUllfT1VUTEVUKSlcbiAgICAgIC5zdWJzY3JpYmUocm91dGUgPT4ge1xuXG4gICAgICAgIGlmIChyb3V0ZS5zbmFwc2hvdC5kYXRhLmJyZWFkY3J1bWIpIHtcbiAgICAgICAgICBjb25zdCBicmVhZGNydW1iID0gKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocm91dGUuc25hcHNob3QuZGF0YS5icmVhZGNydW1iKSkpO1xuICAgICAgICAgIGJyZWFkY3J1bWIubWFwKChjcnVtYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsQ2h1bmtzID0gY3J1bWIudXJsLnNwbGl0KCcvJyk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgY2h1bmsgb2YgdXJsQ2h1bmtzKSB7XG4gICAgICAgICAgICAgIGlmIChjaHVuay5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1JRCA9IGNodW5rLnJlcGxhY2UoJzonLCAnJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGVyUGFyYW1JRCA9IHJvdXRlLnNuYXBzaG90LnBhcmFtc1twYXJhbUlEXTtcbiAgICAgICAgICAgICAgICBjcnVtYi51cmwgPSBjcnVtYi51cmwucmVwbGFjZShgOiR7cGFyYW1JRH1gLCByb3V0ZXJQYXJhbUlEKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYnJlYWRjcnVtYiA9IGJyZWFkY3J1bWI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5icmVhZGNydW1iID0gW107XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG59XG4iXX0=