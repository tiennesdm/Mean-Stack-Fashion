/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET } from '@angular/router';
import { filter } from 'rxjs/operators';
import { map } from 'rxjs/internal/operators';
var Ng7MatBreadcrumbComponent = /** @class */ (function () {
    function Ng7MatBreadcrumbComponent(activatedRoute, router) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.breadcrumb = [];
        this.breadCrumbData();
    }
    /**
     * @return {?}
     */
    Ng7MatBreadcrumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    Ng7MatBreadcrumbComponent.prototype.breadCrumbData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event instanceof NavigationEnd; })))
            .pipe(map((/**
         * @return {?}
         */
        function () { return _this.activatedRoute; })))
            .pipe(map((/**
         * @param {?} route
         * @return {?}
         */
        function (route) {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        })))
            .pipe(filter((/**
         * @param {?} route
         * @return {?}
         */
        function (route) { return route.outlet === PRIMARY_OUTLET; })))
            .subscribe((/**
         * @param {?} route
         * @return {?}
         */
        function (route) {
            if (route.snapshot.data.breadcrumb) {
                /** @type {?} */
                var breadcrumb = (JSON.parse(JSON.stringify(route.snapshot.data.breadcrumb)));
                breadcrumb.map((/**
                 * @param {?} crumb
                 * @return {?}
                 */
                function (crumb) {
                    var e_1, _a;
                    /** @type {?} */
                    var urlChunks = crumb.url.split('/');
                    try {
                        for (var urlChunks_1 = tslib_1.__values(urlChunks), urlChunks_1_1 = urlChunks_1.next(); !urlChunks_1_1.done; urlChunks_1_1 = urlChunks_1.next()) {
                            var chunk = urlChunks_1_1.value;
                            if (chunk.includes(':')) {
                                /** @type {?} */
                                var paramID = chunk.replace(':', '');
                                /** @type {?} */
                                var routerParamID = route.snapshot.params[paramID];
                                crumb.url = crumb.url.replace(":" + paramID, routerParamID);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (urlChunks_1_1 && !urlChunks_1_1.done && (_a = urlChunks_1.return)) _a.call(urlChunks_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }));
                _this.breadcrumb = breadcrumb;
            }
            else {
                _this.breadcrumb = [];
            }
        }));
    };
    Ng7MatBreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-ng7-mat-breadcrumb',
                    template: "<mat-toolbar class=\"mat-bread-crumb\">\n    <mat-list class=\"mat-bread-crumb-list\" *ngIf=\"breadcrumb.length\">\n        <mat-list-item>\n            <span class=\"mat-bread-crumb-spacer\">\n                <span *ngFor=\"let item of breadcrumb; let i = index\">\n                    <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</a>\n                    <span *ngIf=\"!item?.url\" class=\"mat-bread-crumb-list-item\">{{ item.label }}</span>\n                    <span *ngIf=\"breadcrumb.length !== i+1\"> / </span>\n                </span>\n            </span>\n        </mat-list-item>\n    </mat-list>\n</mat-toolbar>",
                    styles: [".mat-bread-crumb{height:30px;background-color:#f1efeb}.mat-bread-crumb-list{padding-bottom:10px}.mat-bread-crumb-list-item{font-size:15px}.mat-bread-crumb-spacer{margin-left:-20px}"]
                }] }
    ];
    /** @nocollapse */
    Ng7MatBreadcrumbComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: Router }
    ]; };
    return Ng7MatBreadcrumbComponent;
}());
export { Ng7MatBreadcrumbComponent };
if (false) {
    /** @type {?} */
    Ng7MatBreadcrumbComponent.prototype.breadcrumb;
    /**
     * @type {?}
     * @private
     */
    Ng7MatBreadcrumbComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    Ng7MatBreadcrumbComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmc3LW1hdC1icmVhZGNydW1iLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nNy1tYXQtYnJlYWRjcnVtYi8iLCJzb3VyY2VzIjpbImxpYi9uZzctbWF0LWJyZWFkY3J1bWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBb0IsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLEdBQUcsRUFBWSxNQUFNLHlCQUF5QixDQUFDO0FBRXhEO0lBUUUsbUNBQ1UsY0FBOEIsRUFDOUIsTUFBYztRQURkLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSnhCLGVBQVUsR0FBaUIsRUFBRSxDQUFDO1FBTTVCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7O0lBRUQsNENBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7OztJQUVELGtEQUFjOzs7SUFBZDtRQUFBLGlCQTZCQztRQTVCQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07YUFDZixJQUFJLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxZQUFZLGFBQWEsRUFBOUIsQ0FBOEIsRUFBQyxDQUFDO2FBQ3JELElBQUksQ0FBQyxHQUFHOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGNBQWMsRUFBbkIsQ0FBbUIsRUFBQyxDQUFDO2FBQ3BDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQyxLQUFLO1lBQ2QsT0FBTyxLQUFLLENBQUMsVUFBVSxFQUFFO2dCQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO2FBQUU7WUFDdEQsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLEVBQUMsQ0FBQzthQUNGLElBQUksQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsTUFBTSxLQUFLLGNBQWMsRUFBL0IsQ0FBK0IsRUFBQyxDQUFDO2FBQ3RELFNBQVM7Ozs7UUFBQyxVQUFBLEtBQUs7WUFFZCxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTs7b0JBQzVCLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUMvRSxVQUFVLENBQUMsR0FBRzs7OztnQkFBQyxVQUFDLEtBQUs7Ozt3QkFDYixTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzt3QkFFdEMsS0FBb0IsSUFBQSxjQUFBLGlCQUFBLFNBQVMsQ0FBQSxvQ0FBQSwyREFBRTs0QkFBMUIsSUFBTSxLQUFLLHNCQUFBOzRCQUNkLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTs7b0NBQ2pCLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7O29DQUNoQyxhQUFhLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2dDQUNwRCxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQUksT0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDOzZCQUM3RDt5QkFDRjs7Ozs7Ozs7O2dCQUNILENBQUMsRUFBQyxDQUFDO2dCQUNILEtBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOztnQkEvQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLG9yQkFBa0Q7O2lCQUVuRDs7OztnQkFSUSxjQUFjO2dCQUFFLE1BQU07O0lBb0QvQixnQ0FBQztDQUFBLEFBaERELElBZ0RDO1NBM0NZLHlCQUF5Qjs7O0lBQ3BDLCtDQUE4Qjs7Ozs7SUFHNUIsbURBQXNDOzs7OztJQUN0QywyQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIsIE5hdmlnYXRpb25FbmQsIFBSSU1BUllfT1VUTEVULCBSb3V0ZXNSZWNvZ25pemVkIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IG1hcCwgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL2ludGVybmFsL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCcmVhZGNydW1iIH0gZnJvbSAnLi9icmVhZGNydW1iLm1vZGVsJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1uZzctbWF0LWJyZWFkY3J1bWInLFxuICB0ZW1wbGF0ZVVybDogJy4vbmc3LW1hdC1icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbmc3LW1hdC1icmVhZGNydW1iLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBOZzdNYXRCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgYnJlYWRjcnVtYjogQnJlYWRjcnVtYltdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHtcbiAgICB0aGlzLmJyZWFkQ3J1bWJEYXRhKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIGJyZWFkQ3J1bWJEYXRhKCkge1xuICAgIHRoaXMucm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoZmlsdGVyKGV2ZW50ID0+IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkpXG4gICAgICAucGlwZShtYXAoKCkgPT4gdGhpcy5hY3RpdmF0ZWRSb3V0ZSkpXG4gICAgICAucGlwZShtYXAoKHJvdXRlKSA9PiB7XG4gICAgICAgIHdoaWxlIChyb3V0ZS5maXJzdENoaWxkKSB7IHJvdXRlID0gcm91dGUuZmlyc3RDaGlsZDsgfVxuICAgICAgICByZXR1cm4gcm91dGU7XG4gICAgICB9KSlcbiAgICAgIC5waXBlKGZpbHRlcihyb3V0ZSA9PiByb3V0ZS5vdXRsZXQgPT09IFBSSU1BUllfT1VUTEVUKSlcbiAgICAgIC5zdWJzY3JpYmUocm91dGUgPT4ge1xuXG4gICAgICAgIGlmIChyb3V0ZS5zbmFwc2hvdC5kYXRhLmJyZWFkY3J1bWIpIHtcbiAgICAgICAgICBjb25zdCBicmVhZGNydW1iID0gKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocm91dGUuc25hcHNob3QuZGF0YS5icmVhZGNydW1iKSkpO1xuICAgICAgICAgIGJyZWFkY3J1bWIubWFwKChjcnVtYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsQ2h1bmtzID0gY3J1bWIudXJsLnNwbGl0KCcvJyk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgY2h1bmsgb2YgdXJsQ2h1bmtzKSB7XG4gICAgICAgICAgICAgIGlmIChjaHVuay5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1JRCA9IGNodW5rLnJlcGxhY2UoJzonLCAnJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGVyUGFyYW1JRCA9IHJvdXRlLnNuYXBzaG90LnBhcmFtc1twYXJhbUlEXTtcbiAgICAgICAgICAgICAgICBjcnVtYi51cmwgPSBjcnVtYi51cmwucmVwbGFjZShgOiR7cGFyYW1JRH1gLCByb3V0ZXJQYXJhbUlEKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYnJlYWRjcnVtYiA9IGJyZWFkY3J1bWI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5icmVhZGNydW1iID0gW107XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG59XG4iXX0=